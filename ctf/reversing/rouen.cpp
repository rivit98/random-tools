#include <cstdint>
#include <array>
#include <vector>
#include <bitset>
#include <iostream>
#include <iterator>
#include <fstream>

typedef unsigned long ulong;
typedef unsigned int uint;
typedef unsigned __int64 uint64;
typedef uint _DWORD;

constexpr uint VALUES_NUM = 6;

void inject_values();

std::array<std::array<uint, 2>, VALUES_NUM> possibilities;
std::array<uint64 *, VALUES_NUM> values_to_change;
uint current_options;

uint64 *TarteAuPomme;
uint64 *JoanOfArc;
uint64 *HotelDeBourgtheroulde;
uint64 *CathedralNotreDamedeRouen;
uint64 *RouenCathedral;
uint64 *RouenCathedral2;
uint *Beurre;

void umul64wide(uint64_t a, uint64_t b, uint64_t *hi, uint64_t *lo) {
    uint64_t a_lo = (uint64_t) (uint32_t) a;
    uint64_t a_hi = a >> 32;
    uint64_t b_lo = (uint64_t) (uint32_t) b;
    uint64_t b_hi = b >> 32;

    uint64_t p0 = a_lo * b_lo;
    uint64_t p1 = a_lo * b_hi;
    uint64_t p2 = a_hi * b_lo;
    uint64_t p3 = a_hi * b_hi;

    uint32_t cy = (uint32_t) (((p0 >> 32) + (uint32_t) p1 + (uint32_t) p2) >> 32);

    *lo = p0 + (p1 << 32) + (p2 << 32);
    *hi = p3 + (p1 >> 32) + (p2 >> 32) + cy;
}

void fill_array() {
    char *v1 = (char *)new uint64[0x1000]; //forgot to cast to char * FUCK ME
    *(uint64 *) v1 = 8648804321712981983LL;
    *(uint64 *) (v1 + 8) = 4312008117723055126LL;
    *(uint64 *) (v1 + 16) = 8975252708717931360LL;
    *(uint64 *) (v1 + 24) = 2266424813234326383LL;
    *(uint64 *) (v1 + 32) = 1087022899257317998LL;
    *(uint64 *) (v1 + 40) = 188167783494611364LL;
    *(uint64 *) (v1 + 48) = 6136580785822665302LL;
    *(uint64 *) (v1 + 56) = 1874833429075574907LL;
    *(uint64 *) (v1 + 64) = 1667952835355246930LL;
    *(uint64 *) (v1 + 72) = 7079000244221456946LL;
    *(uint64 *) (v1 + 80) = 6392559359429742228LL;
    *(uint64 *) (v1 + 88) = 4194154871096103951LL;
    *(uint64 *) (v1 + 96) = 5588353472997762583LL;
    *(uint64 *) (v1 + 104) = 9026802581708195150LL;
    *(uint64 *) (v1 + 112) = 5024302204947496133LL;
    *(uint64 *) (v1 + 120) = 4793685352529133234LL;
    *(uint64 *) (v1 + 128) = 2820106348375911179LL;
    *(uint64 *) (v1 + 136) = 920146342239503992LL;
    *(uint64 *) (v1 + 144) = 1332203387572569419LL;
    *(uint64 *) (v1 + 152) = 121539939433572517LL;
    *(uint64 *) (v1 + 160) = 7897979425474307194LL;
    *(uint64 *) (v1 + 168) = 7490287622462754349LL;
    *(uint64 *) (v1 + 176) = 4238672766015121406LL;
    *(uint64 *) (v1 + 184) = 2386110151337687673LL;
    *(uint64 *) (v1 + 192) = 1848829825196775671LL;
    *(uint64 *) (v1 + 200) = 1768688342677043085LL;
    *(uint64 *) (v1 + 208) = 7681101870152725417LL;
    *(uint64 *) (v1 + 216) = 8402486160577839622LL;
    *(uint64 *) (v1 + 224) = 4105653209078266486LL;
    *(uint64 *) (v1 + 232) = 2360865925598809548LL;
    *(uint64 *) (v1 + 240) = 2057881642368661441LL;
    *(uint64 *) (v1 + 248) = 6943301118482231947LL;
    *(uint64 *) (v1 + 256) = 2672292661020412975LL;
    *(uint64 *) (v1 + 264) = 4057541430882854364LL;
    *(uint64 *) (v1 + 272) = 813077514732681938LL;
    *(uint64 *) (v1 + 280) = 7755114261461209525LL;
    *(uint64 *) (v1 + 288) = 1161803468342194195LL;
    *(uint64 *) (v1 + 296) = 8884440783062125309LL;
    *(uint64 *) (v1 + 304) = 7031028177882888171LL;
    *(uint64 *) (v1 + 312) = 4048394826331501975LL;
    *(uint64 *) (v1 + 320) = 2392354424440739661LL;
    *(uint64 *) (v1 + 328) = 910713224357779545LL;
    *(uint64 *) (v1 + 336) = 7485582173133361618LL;
    *(uint64 *) (v1 + 344) = 7698832251490580685LL;
    *(uint64 *) (v1 + 352) = 3508998237584395558LL;
    *(uint64 *) (v1 + 360) = 5935912770866396618LL;
    *(uint64 *) (v1 + 368) = 807176788615058440LL;
    *(uint64 *) (v1 + 376) = 2943265601381931237LL;
    *(uint64 *) (v1 + 384) = 4159058699565907832LL;
    *(uint64 *) (v1 + 392) = 7221448577649574548LL;
    *(uint64 *) (v1 + 400) = 470046057635267432LL;
    *(uint64 *) (v1 + 408) = 2598123669818010908LL;
    *(uint64 *) (v1 + 416) = 6833503331858046262LL;
    *(uint64 *) (v1 + 424) = 5189119701264156371LL;
    *(uint64 *) (v1 + 432) = 9192924459992837274LL;
    *(uint64 *) (v1 + 440) = 5697769428446755623LL;
    *(uint64 *) (v1 + 448) = 4263390213019092133LL;
    *(uint64 *) (v1 + 456) = 6154381909755167391LL;
    *(uint64 *) (v1 + 464) = 6886769280828908332LL;
    *(uint64 *) (v1 + 472) = 5664699107237310147LL;
    *(uint64 *) (v1 + 480) = 8830060372567848502LL;
    *(uint64 *) (v1 + 488) = 6677143148747434348LL;
    *(uint64 *) (v1 + 496) = 2705358427698909572LL;
    *(ulong *) (v1 + 504) = 2006930048;
    *(uint64 *) (v1 + 508) = 8654854209830590309LL;
    *(uint64 *) (v1 + 516) = 5857270108018498308LL;
    *(uint64 *) (v1 + 524) = 8727902561618872204LL;
    *(uint64 *) (v1 + 532) = 968567275493308759LL;
    *(uint64 *) (v1 + 540) = 4789493679020988571LL;
    *(uint64 *) (v1 + 548) = 7398260045747951290LL;
    *(uint64 *) (v1 + 556) = 6961135174259253837LL;
    *(uint64 *) (v1 + 564) = 7485683203103032027LL;
    *(uint64 *) (v1 + 572) = 3124785028257942080LL;
    *(uint64 *) (v1 + 580) = 8392419596532375109LL;
    *(uint64 *) (v1 + 588) = 6589740148719559939LL;
    *(uint64 *) (v1 + 596) = 6062620125478938903LL;
    *(uint64 *) (v1 + 604) = 6452867808032079914LL;
    *(uint64 *) (v1 + 612) = 3403145001885985654LL;
    *(uint64 *) (v1 + 620) = 8336598803582672821LL;
    *(uint64 *) (v1 + 628) = 1042316679945581408LL;
    *(uint64 *) (v1 + 636) = 4504762941285793254LL;
    *(uint64 *) (v1 + 644) = 8790487893154453136LL;
    *(uint64 *) (v1 + 652) = 1017623641460361191LL;
    *(uint64 *) (v1 + 660) = 1088625646957464916LL;
    *(uint64 *) (v1 + 668) = 4849793972575140162LL;
    *(uint64 *) (v1 + 676) = 6708143644285461629LL;
    *(uint64 *) (v1 + 684) = 4123907267549670210LL;
    *(uint64 *) (v1 + 692) = 8382470161753759974LL;
    *(uint64 *) (v1 + 700) = 4032926996166054338LL;
    *(uint64 *) (v1 + 708) = 3680999764618525509LL;
    *(uint64 *) (v1 + 716) = 6590138614267568277LL;
    *(uint64 *) (v1 + 724) = 9003052044402096289LL;
    *(uint64 *) (v1 + 732) = 4521543339963643891LL;
    *(uint64 *) (v1 + 740) = 6227418094088179063LL;
    *(uint64 *) (v1 + 748) = 9214512577904265030LL;
    *(uint64 *) (v1 + 756) = 1981558066346240799LL;
    *(uint64 *) (v1 + 764) = 8822671271983113584LL;
    *(uint64 *) (v1 + 772) = 5518593377046613008LL;
    *(uint64 *) (v1 + 780) = 6886239981753541955LL;
    *(uint64 *) (v1 + 788) = 1552034558990422726LL;
    *(uint64 *) (v1 + 796) = 1475028729070003149LL;
    *(uint64 *) (v1 + 804) = 5709988562438217942LL;
    *(uint64 *) (v1 + 812) = 5671849472798237757LL;
    *(uint64 *) (v1 + 820) = 4181993989428487082LL;
    *(uint64 *) (v1 + 828) = 1553097699857396924LL;
    *(uint64 *) (v1 + 836) = 2610806901538709936LL;
    *(uint64 *) (v1 + 844) = 5911946638739591556LL;
    *(uint64 *) (v1 + 852) = 5348348996743723322LL;
    *(uint64 *) (v1 + 860) = 2221544755526077680LL;
    *(uint64 *) (v1 + 868) = 4577931969868493064LL;
    *(uint64 *) (v1 + 876) = 3660106530765732638LL;
    *(uint64 *) (v1 + 884) = 702033207054724239LL;
    *(uint64 *) (v1 + 892) = 1947740933194396472LL;
    *(uint64 *) (v1 + 900) = 4246346214421290052LL;
    *(uint64 *) (v1 + 908) = 1275455410713321850LL;
    *(uint64 *) (v1 + 916) = 7931707489420226246LL;
    *(uint64 *) (v1 + 924) = 467262297422045404LL;
    *(uint64 *) (v1 + 932) = 5652648094839838101LL;
    *(uint64 *) (v1 + 940) = 1422170608302587977LL;
    *(uint64 *) (v1 + 948) = 9116361870461299014LL;
    *(uint64 *) (v1 + 956) = 7824695141909070971LL;
    *(uint64 *) (v1 + 964) = 1784811107716061611LL;
    *(uint64 *) (v1 + 972) = 2124261431813935344LL;
    *(uint64 *) (v1 + 980) = 5317588251144443830LL;
    *(uint64 *) (v1 + 988) = 3458652803484670429LL;
    *(uint64 *) (v1 + 996) = 3555138466334109993LL;
    *(uint64 *) (v1 + 1004) = 4361066559550696796LL;
    *(ulong *) (v1 + 1012) = 1110977009;
    *(uint64 *) (v1 + 1016) = 2979888787637213568LL;
    *(uint64 *) (v1 + 1024) = 2673083261053646513LL;
    *(uint64 *) (v1 + 1032) = 8295265095320788628LL;
    *(uint64 *) (v1 + 1040) = 5016909659326148126LL;
    *(uint64 *) (v1 + 1048) = 4982947975533969541LL;
    *(uint64 *) (v1 + 1056) = 3402501023911576220LL;
    *(uint64 *) (v1 + 1064) = 648128442408710901LL;
    *(uint64 *) (v1 + 1072) = 8442250416041320854LL;
    *(uint64 *) (v1 + 1080) = 7002060651740166370LL;
    *(uint64 *) (v1 + 1088) = 5670843861276782784LL;
    *(uint64 *) (v1 + 1096) = 3053518690175381551LL;
    *(uint64 *) (v1 + 1104) = 9189447228714063051LL;
    *(uint64 *) (v1 + 1112) = 852246028583986586LL;
    *(uint64 *) (v1 + 1120) = 6839864595458237570LL;
    *(uint64 *) (v1 + 1128) = 8571723850529766586LL;
    *(uint64 *) (v1 + 1136) = 8803271666710069360LL;
    *(uint64 *) (v1 + 1144) = 6478003495007257620LL;
    *(uint64 *) (v1 + 1152) = 1754053992951360244LL;
    *(uint64 *) (v1 + 1160) = 2800227702567328504LL;
    *(uint64 *) (v1 + 1168) = 2710722362727679284LL;
    *(uint64 *) (v1 + 1176) = 5819078963264794692LL;
    *(uint64 *) (v1 + 1184) = 1795991845704367191LL;
    *(uint64 *) (v1 + 1192) = 5784661743889543536LL;
    *(uint64 *) (v1 + 1200) = 5027840312102687181LL;
    *(uint64 *) (v1 + 1208) = 6756495707350729404LL;
    *(uint64 *) (v1 + 1216) = 4555606378275135364LL;
    *(uint64 *) (v1 + 1224) = 7261357275847503485LL;
    *(uint64 *) (v1 + 1232) = 6198968492173658342LL;
    *(uint64 *) (v1 + 1240) = 2480892476692720578LL;
    *(uint64 *) (v1 + 1248) = 4719758430966526047LL;
    *(uint64 *) (v1 + 1256) = 7197472067378405094LL;
    *(uint64 *) (v1 + 1264) = 9088420071828583762LL;
    *(uint64 *) (v1 + 1272) = 7936423437172169849LL;
    *(uint64 *) (v1 + 1280) = 6756030193351205292LL;
    *(uint64 *) (v1 + 1288) = 6713687875280655096LL;
    *(uint64 *) (v1 + 1296) = 5709498686864067880LL;
    *(uint64 *) (v1 + 1304) = 1249689012771723557LL;
    *(uint64 *) (v1 + 1312) = 6726561261242188110LL;
    *(uint64 *) (v1 + 1320) = 2366734351013266290LL;
    *(uint64 *) (v1 + 1328) = 3103116845213643034LL;
    *(uint64 *) (v1 + 1336) = 4554864576918208921LL;
    *(uint64 *) (v1 + 1344) = 7486179640328433287LL;
    *(uint64 *) (v1 + 1352) = 510746522065043689LL;
    *(uint64 *) (v1 + 1360) = 2120878457781463380LL;
    *(uint64 *) (v1 + 1368) = 4230250913661693190LL;
    *(uint64 *) (v1 + 1376) = 2972679820761452182LL;
    *(uint64 *) (v1 + 1384) = 7197190176962965718LL;
    *(uint64 *) (v1 + 1392) = 8741230819998199686LL;
    *(uint64 *) (v1 + 1400) = 7721472518569521776LL;
    *(uint64 *) (v1 + 1408) = 7073881420078195072LL;
    *(uint64 *) (v1 + 1416) = 4702254604551567925LL;
    *(uint64 *) (v1 + 1424) = 6445607320870297393LL;
    *(uint64 *) (v1 + 1432) = 1165927435886226930LL;
    *(uint64 *) (v1 + 1440) = 1825055720715246867LL;
    *(uint64 *) (v1 + 1448) = 6179265596658755913LL;
    *(uint64 *) (v1 + 1456) = 3954223309707772349LL;
    *(uint64 *) (v1 + 1464) = 959833029832407712LL;
    *(uint64 *) (v1 + 1472) = 4604972465780668865LL;
    *(uint64 *) (v1 + 1480) = 3900919840337309622LL;
    *(uint64 *) (v1 + 1488) = 4668567852401599020LL;
    *(uint64 *) (v1 + 1496) = 2886858747447314832LL;
    *(uint64 *) (v1 + 1504) = 4587981248889026923LL;
    *(uint64 *) (v1 + 1512) = 2938605599925779618LL;
    *(uint64 *) (v1 + 1524) = 3315558192906273054LL;
    *(uint64 *) (v1 + 1532) = 8512613920484003187LL;
    *(uint64 *) (v1 + 1540) = 6571719715056512102LL;
    *(uint64 *) (v1 + 1548) = 5464907003693653051LL;
    *(ulong *) (v1 + 1520) = 1961035891;
    *(uint64 *) (v1 + 1556) = 4232707279641361824LL;
    *(uint64 *) (v1 + 1564) = 4109472500983273400LL;
    *(uint64 *) (v1 + 1572) = 4785391952718971167LL;
    *(uint64 *) (v1 + 1580) = 4551220173643429012LL;
    *(uint64 *) (v1 + 1588) = 6330172515255727062LL;
    *(uint64 *) (v1 + 1596) = 3448402777322296470LL;
    *(uint64 *) (v1 + 1604) = 7558685754265321214LL;
    *(uint64 *) (v1 + 1612) = 7207817938897782696LL;
    *(uint64 *) (v1 + 1620) = 6686610365559609203LL;
    *(uint64 *) (v1 + 1628) = 2912866454292199028LL;
    *(uint64 *) (v1 + 1636) = 5783506570165630996LL;
    *(uint64 *) (v1 + 1644) = 3006427664443750958LL;
    *(uint64 *) (v1 + 1652) = 6379406546548620620LL;
    *(uint64 *) (v1 + 1660) = 381790733830925547LL;
    *(uint64 *) (v1 + 1668) = 1858855022072306048LL;
    *(uint64 *) (v1 + 1676) = 2778542768485744864LL;
    *(uint64 *) (v1 + 1684) = 6830730012602567976LL;
    *(uint64 *) (v1 + 1692) = 486088380068027999LL;
    *(uint64 *) (v1 + 1700) = 904406764775496621LL;
    *(uint64 *) (v1 + 1708) = 313703548570009295LL;
    *(uint64 *) (v1 + 1716) = 118945839372456127LL;
    *(uint64 *) (v1 + 1724) = 3407627380359090565LL;
    *(uint64 *) (v1 + 1732) = 2766313557766048829LL;
    *(uint64 *) (v1 + 1740) = 1592566178523781799LL;
    *(uint64 *) (v1 + 1748) = 2259395718026249223LL;
    *(uint64 *) (v1 + 1756) = 880495161090899574LL;
    *(uint64 *) (v1 + 1764) = 6254785458868591370LL;
    *(uint64 *) (v1 + 1772) = 1065497162584531856LL;
    *(uint64 *) (v1 + 1780) = 2769254897144930014LL;
    *(uint64 *) (v1 + 1788) = 556136878225819793LL;
    *(uint64 *) (v1 + 1796) = 2158146803027329299LL;
    *(uint64 *) (v1 + 1804) = 710466860621681087LL;
    *(uint64 *) (v1 + 1812) = 4420812896313122269LL;
    *(uint64 *) (v1 + 1820) = 4996395040914317571LL;
    *(uint64 *) (v1 + 1828) = 6178910445613697163LL;
    *(uint64 *) (v1 + 1836) = 5993032337059090750LL;
    *(uint64 *) (v1 + 1844) = 5895676075316297964LL;
    *(uint64 *) (v1 + 1852) = 6972219526417918211LL;
    *(uint64 *) (v1 + 1860) = 2257209137574905333LL;
    *(uint64 *) (v1 + 1868) = 1923768401441537919LL;
    *(uint64 *) (v1 + 1876) = 8813984993747484006LL;
    *(uint64 *) (v1 + 1884) = 3917456567344616740LL;
    *(uint64 *) (v1 + 1892) = 112090993446891624LL;
    *(uint64 *) (v1 + 1900) = 1813119405450017138LL;
    *(uint64 *) (v1 + 1908) = 709575528570171692LL;
    *(uint64 *) (v1 + 1916) = 7022180574888604656LL;
    *(uint64 *) (v1 + 1924) = 3664696098466732444LL;
    *(uint64 *) (v1 + 1932) = 6414219347805896168LL;
    *(uint64 *) (v1 + 1940) = 5794068168531259026LL;
    *(uint64 *) (v1 + 1948) = 9103238174306492378LL;
    *(uint64 *) (v1 + 1956) = 5212602684332370538LL;
    *(uint64 *) (v1 + 1964) = 6677966907390941285LL;
    *(uint64 *) (v1 + 1972) = 8619918907505845180LL;
    *(uint64 *) (v1 + 1980) = 8369487871324598469LL;
    *(uint64 *) (v1 + 1988) = 1576786730881571507LL;
    *(uint64 *) (v1 + 1996) = 6625540607542564790LL;
    *(uint64 *) (v1 + 2004) = 1975075543970034312LL;
    *(uint64 *) (v1 + 2012) = 2588242664367419830LL;
    *(uint64 *) (v1 + 2020) = 8476230959582360688LL;
    *(uint64 *) (v1 + 2032) = 988518720853295925LL;
    *(uint64 *) (v1 + 2040) = 1016050694052366989LL;
    *(uint64 *) (v1 + 2048) = 3749823912810629321LL;
    *(uint64 *) (v1 + 2056) = 3422293959676553811LL;
    *(uint64 *) (v1 + 2064) = 6885055494545067538LL;
    *(uint64 *) (v1 + 2072) = 3839425104970807081LL;
    *(ulong *) (v1 + 2028) = 1096352957;
    *(uint64 *) (v1 + 2080) = 2386668780946120521LL;
    *(uint64 *) (v1 + 2088) = 4424667698396929034LL;
    *(uint64 *) (v1 + 2096) = 3666966399604888987LL;
    *(uint64 *) (v1 + 2104) = 8996505495442345785LL;
    *(uint64 *) (v1 + 2112) = 2232160741734774317LL;
    *(uint64 *) (v1 + 2120) = 9131923049398201966LL;
    *(uint64 *) (v1 + 2128) = 3170405392841294860LL;
    *(uint64 *) (v1 + 2136) = 1591418206289630163LL;
    *(uint64 *) (v1 + 2144) = 7187278728280777558LL;
    *(uint64 *) (v1 + 2152) = 8082708317765585475LL;
    *(uint64 *) (v1 + 2160) = 6187624127724064276LL;
    *(uint64 *) (v1 + 2168) = 3478070972140666469LL;
    *(uint64 *) (v1 + 2176) = 3071659958999354127LL;
    *(uint64 *) (v1 + 2184) = 3991139287322534080LL;
    *(uint64 *) (v1 + 2192) = 169624499145107348LL;
    *(uint64 *) (v1 + 2200) = 261720005369010633LL;
    *(uint64 *) (v1 + 2208) = 3891373725283212256LL;
    *(uint64 *) (v1 + 2216) = 2744818918246485390LL;
    *(uint64 *) (v1 + 2224) = 8630150142107631537LL;
    *(uint64 *) (v1 + 2232) = 5244101138043924803LL;
    *(uint64 *) (v1 + 2240) = 5146483200632653864LL;
    *(uint64 *) (v1 + 2248) = 6648576385272071564LL;
    *(uint64 *) (v1 + 2256) = 1146660941433036304LL;
    *(uint64 *) (v1 + 2264) = 7717081339897443488LL;
    *(uint64 *) (v1 + 2272) = 8833243584962995920LL;
    *(uint64 *) (v1 + 2280) = 160785555627511398LL;
    *(uint64 *) (v1 + 2288) = 2476945152077272128LL;
    *(uint64 *) (v1 + 2296) = 7447199643345668428LL;
    *(uint64 *) (v1 + 2304) = 2393357104190989598LL;
    *(uint64 *) (v1 + 2312) = 7009384685788485306LL;
    *(uint64 *) (v1 + 2320) = 9093387013048455516LL;
    *(uint64 *) (v1 + 2328) = 6349087182632972975LL;
    *(uint64 *) (v1 + 2336) = 7500490678372566268LL;
    *(uint64 *) (v1 + 2344) = 1144819573841618264LL;
    *(uint64 *) (v1 + 2352) = 3966026862952060376LL;
    *(uint64 *) (v1 + 2360) = 4075289731828787358LL;
    *(uint64 *) (v1 + 2368) = 2127376704308634481LL;
    *(uint64 *) (v1 + 2376) = 4208219932194180103LL;
    *(uint64 *) (v1 + 2384) = 2583326106100541823LL;
    *(uint64 *) (v1 + 2392) = 4383104938411503111LL;
    *(uint64 *) (v1 + 2400) = 4681326838749551221LL;
    *(uint64 *) (v1 + 2408) = 4014694916256791719LL;
    *(uint64 *) (v1 + 2416) = 7024173071203455129LL;
    *(uint64 *) (v1 + 2424) = 6243984479160795872LL;
    *(uint64 *) (v1 + 2432) = 1984547515044648380LL;
    *(uint64 *) (v1 + 2440) = 3426826389983720105LL;
    *(uint64 *) (v1 + 2448) = 873564631003299623LL;
    *(uint64 *) (v1 + 2456) = 133682259381542085LL;
    *(uint64 *) (v1 + 2464) = 4850334138548871366LL;
    *(uint64 *) (v1 + 2472) = 2256076030372657309LL;
    *(uint64 *) (v1 + 2480) = 104131551266879054LL;
    *(uint64 *) (v1 + 2488) = 7687917386680541915LL;
    *(uint64 *) (v1 + 2496) = 8946931033264866175LL;
    *(uint64 *) (v1 + 2504) = 785853026968389164LL;
    *(uint64 *) (v1 + 2512) = 3852600750239128662LL;
    *(uint64 *) (v1 + 2520) = 5089975123396049547LL;
    *(uint64 *) (v1 + 2528) = 5391737254684372790LL;
    *(uint64 *) (v1 + 2540) = 4444670074592206847LL;
    *(uint64 *) (v1 + 2548) = 6426334368973105713LL;
    *(uint64 *) (v1 + 2556) = 4065853254314348852LL;
    *(uint64 *) (v1 + 2564) = 3897537361230870004LL;
    *(uint64 *) (v1 + 2572) = 1100107026245700994LL;
    *(uint64 *) (v1 + 2580) = 4771487900989624357LL;
    *(uint64 *) (v1 + 2588) = 8739485157200285253LL;
    *(uint64 *) (v1 + 2596) = 2660438814069076162LL;
    *(ulong *) (v1 + 2536) = 554207196;
    *(uint64 *) (v1 + 2604) = 6560184133774548269LL;
    *(uint64 *) (v1 + 2612) = 6602854823119926191LL;
    *(uint64 *) (v1 + 2620) = 2639727261481747248LL;
    *(uint64 *) (v1 + 2628) = 4660898613816570994LL;
    *(uint64 *) (v1 + 2636) = 7208426505754060514LL;
    *(uint64 *) (v1 + 2644) = 5713256598595446927LL;
    *(uint64 *) (v1 + 2652) = 75026329084179125LL;
    *(uint64 *) (v1 + 2660) = 4499050330534190979LL;
    *(uint64 *) (v1 + 2668) = 7015286178837031517LL;
    *(uint64 *) (v1 + 2676) = 7036879962876327003LL;
    *(uint64 *) (v1 + 2684) = 7606486956452044377LL;
    *(uint64 *) (v1 + 2692) = 7289580553897262596LL;
    *(uint64 *) (v1 + 2700) = 7643740829762020017LL;
    *(uint64 *) (v1 + 2708) = 4389230352841123913LL;
    *(uint64 *) (v1 + 2716) = 2477225073971133140LL;
    *(uint64 *) (v1 + 2724) = 8458267250855975679LL;
    *(uint64 *) (v1 + 2732) = 8511751511904912597LL;
    *(uint64 *) (v1 + 2740) = 7332186337508031869LL;
    *(uint64 *) (v1 + 2748) = 8229436483114928004LL;
    *(uint64 *) (v1 + 2756) = 4810834873141339061LL;
    *(uint64 *) (v1 + 2764) = 3509024699699703661LL;
    *(uint64 *) (v1 + 2772) = 6859486870245759392LL;
    *(uint64 *) (v1 + 2780) = 1664488983813142049LL;
    *(uint64 *) (v1 + 2788) = 1643407342340277160LL;
    *(uint64 *) (v1 + 2796) = 1048963041016791882LL;
    *(uint64 *) (v1 + 2804) = 2196622061697452649LL;
    *(uint64 *) (v1 + 2812) = 6728683903145968024LL;
    *(uint64 *) (v1 + 2820) = 1177467497978226750LL;
    *(uint64 *) (v1 + 2828) = 6360919126288283143LL;
    *(uint64 *) (v1 + 2836) = 4786944239615988728LL;
    *(uint64 *) (v1 + 2844) = 5445320317767359403LL;
    *(uint64 *) (v1 + 2852) = 5454541383796405635LL;
    *(uint64 *) (v1 + 2860) = 6030315569153741626LL;
    *(uint64 *) (v1 + 2868) = 1711968296157098476LL;
    *(uint64 *) (v1 + 2876) = 4656469884028157652LL;
    *(uint64 *) (v1 + 2884) = 1103805333041315916LL;
    *(uint64 *) (v1 + 2892) = 9217524924931977241LL;
    *(uint64 *) (v1 + 2900) = 6907918808173188515LL;
    *(uint64 *) (v1 + 2908) = 8181152923928780908LL;
    *(uint64 *) (v1 + 2916) = 1792947211057624511LL;
    *(uint64 *) (v1 + 2924) = 6876384505083648338LL;
    *(uint64 *) (v1 + 2932) = 6119179172969516733LL;
    *(uint64 *) (v1 + 2940) = 4155069767686998805LL;
    *(uint64 *) (v1 + 2948) = 6266383807321906181LL;
    *(uint64 *) (v1 + 2956) = 5066624958326966044LL;
    *(uint64 *) (v1 + 2964) = 5959753069967396184LL;
    *(uint64 *) (v1 + 2972) = 3198923649428964605LL;
    *(uint64 *) (v1 + 2980) = 6320504781465027901LL;
    *(uint64 *) (v1 + 2988) = 3649349368122279187LL;
    *(uint64 *) (v1 + 2996) = 7189397555166643201LL;
    *(uint64 *) (v1 + 3004) = 7001981284466165091LL;
    *(uint64 *) (v1 + 3012) = 1211862046538534327LL;
    *(uint64 *) (v1 + 3020) = 1121283212400997205LL;
    *(uint64 *) (v1 + 3028) = 1194977008910266590LL;
    *(uint64 *) (v1 + 3036) = 4880658732619609868LL;
    *(uint64 *) (v1 + 3048) = 1484740427155841500LL;
    *(uint64 *) (v1 + 3056) = 4951286532826612840LL;
    *(uint64 *) (v1 + 3064) = 7805817266218701568LL;
    *(uint64 *) (v1 + 3072) = 8067745743741807254LL;
    *(uint64 *) (v1 + 3080) = 463202658429348343LL;
    *(uint64 *) (v1 + 3088) = 1056943674755815289LL;
    *(uint64 *) (v1 + 3096) = 1367562424131729350LL;
    *(uint64 *) (v1 + 3104) = 2787789035181722338LL;
    *(uint64 *) (v1 + 3112) = 6988152171977165458LL;
    *(uint64 *) (v1 + 3120) = 4146872131135092305LL;
    *(ulong *) (v1 + 3044) = 183670846;
    *(uint64 *) (v1 + 3128) = 3511266521816298773LL;
    *(uint64 *) (v1 + 3136) = 8101588366629288185LL;
    *(uint64 *) (v1 + 3144) = 9157667676067473295LL;
    *(uint64 *) (v1 + 3152) = 2437873551861339242LL;
    *(uint64 *) (v1 + 3160) = 2709779685199368343LL;
    *(uint64 *) (v1 + 3168) = 4980305822625133026LL;
    *(uint64 *) (v1 + 3176) = 4143967971869920721LL;
    *(uint64 *) (v1 + 3184) = 1543937415969073436LL;
    *(uint64 *) (v1 + 3192) = 6803642533443641428LL;
    *(uint64 *) (v1 + 3200) = 2367137335705121769LL;
    *(uint64 *) (v1 + 3208) = 1449421411541246599LL;
    *(uint64 *) (v1 + 3216) = 5628262756964555947LL;
    *(uint64 *) (v1 + 3224) = 1675807274978866214LL;
    *(uint64 *) (v1 + 3232) = 4188613504816846091LL;
    *(uint64 *) (v1 + 3240) = 4522360951066496503LL;
    *(uint64 *) (v1 + 3248) = 8511340123268221455LL;
    *(uint64 *) (v1 + 3256) = 7508341856082790308LL;
    *(uint64 *) (v1 + 3264) = 7605229614469171740LL;
    *(uint64 *) (v1 + 3272) = 6530654670756901805LL;
    *(uint64 *) (v1 + 3280) = 470108352988557579LL;
    *(uint64 *) (v1 + 3288) = 2809315598540255590LL;
    *(uint64 *) (v1 + 3296) = 5511371528722336885LL;
    *(uint64 *) (v1 + 3304) = 4605325649593629498LL;
    *(uint64 *) (v1 + 3312) = 3783946397497105449LL;
    *(uint64 *) (v1 + 3320) = 1171492116285726117LL;
    *(uint64 *) (v1 + 3328) = 6209721330939484938LL;
    *(uint64 *) (v1 + 3336) = 3100049725896755972LL;
    *(uint64 *) (v1 + 3344) = 5447115268656038705LL;
    *(uint64 *) (v1 + 3352) = 1211475228637968425LL;
    *(uint64 *) (v1 + 3360) = 759361532334707514LL;
    *(uint64 *) (v1 + 3368) = 9139002356872481410LL;
    *(uint64 *) (v1 + 3376) = 7966375315122382870LL;
    *(uint64 *) (v1 + 3384) = 3772550168744123899LL;
    *(uint64 *) (v1 + 3392) = 7848613912563013767LL;
    *(uint64 *) (v1 + 3400) = 100412600019921357LL;
    *(uint64 *) (v1 + 3408) = 8358699880907006254LL;
    *(uint64 *) (v1 + 3416) = 3986200066173131405LL;
    *(uint64 *) (v1 + 3424) = 697347392733108518LL;
    *(uint64 *) (v1 + 3432) = 2471395698612436151LL;
    *(uint64 *) (v1 + 3440) = 4598496208663948534LL;
    *(uint64 *) (v1 + 3448) = 3489642159475288581LL;
    *(uint64 *) (v1 + 3456) = 8930417996427439382LL;
    *(uint64 *) (v1 + 3464) = 5493599967070765260LL;
    *(uint64 *) (v1 + 3472) = 6735793552306138572LL;
    *(uint64 *) (v1 + 3480) = 1279315139247159644LL;
    *(uint64 *) (v1 + 3488) = 8629565579421318404LL;
    *(uint64 *) (v1 + 3496) = 2277345811593764394LL;
    *(uint64 *) (v1 + 3504) = 3807792587963769070LL;
    *(uint64 *) (v1 + 3512) = 2186010359895388946LL;
    *(uint64 *) (v1 + 3520) = 7887615265517359801LL;
    *(uint64 *) (v1 + 3528) = 3967008322159714335LL;
    *(uint64 *) (v1 + 3536) = 536920305789352381LL;
    *(uint64 *) (v1 + 3544) = 1800982772028605612LL;
    *(uint64 *) (v1 + 3556) = 6217944577335587063LL;
    *(uint64 *) (v1 + 3564) = 6386609999953395128LL;
    *(uint64 *) (v1 + 3572) = 8849737190251176628LL;
    *(uint64 *) (v1 + 3580) = 8817665828084008831LL;
    *(uint64 *) (v1 + 3588) = 3629767155088515081LL;
    *(uint64 *) (v1 + 3596) = 1212698375913642037LL;
    *(uint64 *) (v1 + 3604) = 3551568733658867284LL;
    *(uint64 *) (v1 + 3612) = 1595065407339084046LL;
    *(uint64 *) (v1 + 3620) = 6745757596876391687LL;
    *(uint64 *) (v1 + 3628) = 3624897290278148409LL;
    *(uint64 *) (v1 + 3636) = 8010806035184770176LL;
    *(uint64 *) (v1 + 3644) = 3209910901487308117LL;
    *(ulong *) (v1 + 3552) = 1820965534;
    *(uint64 *) (v1 + 3652) = 7619409117888755070LL;
    *(uint64 *) (v1 + 3660) = 5735653200379311330LL;
    *(uint64 *) (v1 + 3668) = 2131805433043838236LL;
    *(uint64 *) (v1 + 3676) = 5989210219354451977LL;
    *(uint64 *) (v1 + 3684) = 2385713266850129603LL;
    *(uint64 *) (v1 + 3692) = 4972870902744929365LL;
    *(uint64 *) (v1 + 3700) = 7145594107518558398LL;
    *(uint64 *) (v1 + 3708) = 6327991487749664813LL;
    *(uint64 *) (v1 + 3716) = 5115842437234850926LL;
    *(uint64 *) (v1 + 3724) = 827528353400150259LL;
    *(uint64 *) (v1 + 3732) = 3013544840964134465LL;
    *(uint64 *) (v1 + 3740) = 525069415824994838LL;
    *(uint64 *) (v1 + 3748) = 3142556343237153319LL;
    *(uint64 *) (v1 + 3756) = 2513094569950238490LL;
    *(uint64 *) (v1 + 3764) = 4621218420497656775LL;
    *(uint64 *) (v1 + 3772) = 7138258563985796163LL;
    *(uint64 *) (v1 + 3780) = 6734940167914970799LL;
    *(uint64 *) (v1 + 3788) = 6359061441389171029LL;
    *(uint64 *) (v1 + 3796) = 1543336922472647133LL;
    *(uint64 *) (v1 + 3804) = 6125735662737598768LL;
    *(uint64 *) (v1 + 3812) = 2511504306272978087LL;
    *(uint64 *) (v1 + 3820) = 7805756410710845257LL;
    *(uint64 *) (v1 + 3828) = 2531553747161261211LL;
    *(uint64 *) (v1 + 3836) = 2976487835128579675LL;
    *(uint64 *) (v1 + 3844) = 4242635526046866215LL;
    *(uint64 *) (v1 + 3852) = 580129162170340994LL;
    *(uint64 *) (v1 + 3860) = 3700670838162038265LL;
    *(uint64 *) (v1 + 3868) = 4983230081031733904LL;
    *(uint64 *) (v1 + 3876) = 2486374941859154609LL;
    *(uint64 *) (v1 + 3884) = 7207864350927820050LL;
    *(uint64 *) (v1 + 3892) = 1161817470105202268LL;
    *(uint64 *) (v1 + 3900) = 8745124169934884904LL;
    *(uint64 *) (v1 + 3908) = 5750798495115859772LL;
    *(uint64 *) (v1 + 3916) = 4439724605015887082LL;
    *(uint64 *) (v1 + 3924) = 4718868641228893318LL;
    *(uint64 *) (v1 + 3932) = 4785383443827372115LL;
    *(uint64 *) (v1 + 3940) = 691276581503819025LL;
    *(uint64 *) (v1 + 3948) = 5084798439091373415LL;
    *(uint64 *) (v1 + 3956) = 5654663756210897001LL;
    *(uint64 *) (v1 + 3964) = 7125437752370830370LL;
    *(uint64 *) (v1 + 3972) = 2538557936066570735LL;
    *(uint64 *) (v1 + 3980) = 448708006692980448LL;
    *(uint64 *) (v1 + 3988) = 6044165262637284500LL;
    *(uint64 *) (v1 + 3996) = 5810070483992419534LL;
    *(uint64 *) (v1 + 4004) = 2544918409302399824LL;
    *(uint64 *) (v1 + 4012) = 2449809529011102731LL;
    *(uint64 *) (v1 + 4020) = 5535973160451146864LL;
    *(uint64 *) (v1 + 4028) = 2213849736414360791LL;
    *(uint64 *) (v1 + 4036) = 6861897155876199601LL;
    *(uint64 *) (v1 + 4044) = 2484048856509088381LL;
    *(uint64 *) (v1 + 4052) = 4438871985321308603LL;
    *(uint64 *) (v1 + 4060) = 2167868857492100067LL;
    *(uint64 *) (v1 + 4068) = 8582940974286002971LL;
    *(uint64 *) (v1 + 4076) = 1117282193971075898LL;
    *(uint64 *) (v1 + 4084) = 7872269845693646649LL;
    *(ulong *) (v1 + 4092) = 1021821454;
    Beurre = (uint *)v1;
}

void func1() {
//    for(uint i = 0; i < 0x40; i++){
//        std::cout << std::hex << Beurre[i] << std::endl;
//    }

//    _DWORD *v1 = (_DWORD *) Beurre;
//    int64 v2 = reinterpret_cast<long long int>(Beurre + 4096);
//    uint v3 = *(_DWORD *) CathedralNotreDamedeRouen + *(_DWORD *) RouenCathedral;
//    do {
//        *v1 ^= 48271 * (unsigned __int64) v3 % 0x7FFFFFFF;
//        ++v1;
//        v3 = 48271 * (unsigned __int64) v3 % 0x7FFFFFFF;
//    } while ((_DWORD *) v2 != v1);


    uint64 rdi = 0x200000005;
    uint64 rdx;
    uint64 rcx;
    uint *rsi = (uint *)Beurre;
    uint64 rax = *RouenCathedral + *CathedralNotreDamedeRouen;
    uint *r8 = rsi + 0x400;

    while(r8 != rsi){
        rcx = rax;
        rcx *= 0x0BC8F;
        rax = rcx;
        umul64wide(rax, rdi, &rdx, &rax);
        rax = rcx;
        rax -= rdx;
        rax >>= 1;
        rdx += rax;
        rdx >>= 0x1E;
        rax = rdx;
        rax <<= 0x1F;
        rax -= rdx;
        rcx -= rax;
        *rsi ^= rcx;
//        std::cout << std::hex << *rsi << std::endl;
        rsi = rsi + 1;
        rax = rcx;
    }


    *JoanOfArc = 0x8621;
    *HotelDeBourgtheroulde = 0x972f0000;
    *CathedralNotreDamedeRouen = 0x8760;
    *RouenCathedral = 0xE9B20000;
}


//dont care about string copying
void print_possible_solutions(std::vector<std::vector<char>>& results, uint idx = 0, std::string output = ""){
    static std::ofstream out("results.txt");
    if(idx >= results.size()){
        out << output << '\n';
        return;
    }

    for(char c : results[idx]){
        print_possible_solutions(results, idx + 1, output + c);
    }

//    for(const auto& vec : results){
//        if(vec.size() == 1){
//            std::cout << vec[0] << " ";
//        }else{
//            std::cout << "[";
//            for(const auto& c : vec){
//                std::cout << c << "|";
//            }
//            std::cout << "] ";
//        }
//    }
//    std::cout << std::endl;
}

ulong MaisonPinel() {
    uint64 r8 = 0x200000005;
    uint64 rdi = 0;
    uint64 r9 = 0x1000;

    uint64 rax = (*TarteAuPomme << 24)
          + (*JoanOfArc << 16)
          + (*HotelDeBourgtheroulde << 8)
          + *CathedralNotreDamedeRouen;

    uint64 rdx = (*TarteAuPomme << 24)
                 + (*JoanOfArc << 16)
                 + *CathedralNotreDamedeRouen;


    uint local_array[0x1000];
    uint64 rcx;
    while (rdi < r9) {
        rcx = rax;
        rcx *= 0xBC8F;
        rax = rcx;
        umul64wide(rax, r8, &rdx, &rax);
        rax = rcx;
        rax -= rdx;
        rax >>= 1;
        rdx += rax;
        rdx >>= 0x1E;
        rax = rdx;
        rax <<= 0x1F;
        rax -= rdx;
        rcx -= rax;
        local_array[rdi++] = rcx;
//        printf("0x%llx\n", rcx);
        rax = rcx;
    }

    rax = *RouenCathedral2;
    rcx = rax;
    rcx <<= 0x10;
    rcx += rax;

    std::vector<std::vector<char>> results;
    results.reserve(0x22);
    std::cout << std::hex;

    uint64 r11;
    uint *r10 = (uint *)Beurre;
    r8 = 0;
    r9 = 0x200000005;
    do {
        rcx *= 0x0BC8F;
        rax = rcx;
        umul64wide(rax, r9, &rdx, &rax);
        rax = rcx;
        rax -= rdx;
        rax >>= 1;
        rdx += rax;
        rdx >>= 0x1E;
        rax = rdx;
        rax <<= 0x1F;
        rax -= rdx;
        rdx = 0;
        rcx -= rax;
        rax = rcx;

        uint64 s_rax = rax;
        uint64 s_rdx = rdx;
        std::vector<char> temp_vec;
        temp_vec.reserve(0x22);
        for (uint c = 0x20; c < 0x7d; c++) {
            rax = s_rax;
            rdx = s_rdx;

            rdi = c;
            r11 = rdi + 0x35E;
            rdx = rax % r11;
            rax /= r11;
            rax = rdx;

            rdi += local_array[rdx];
//            std::cout << "RDI: 0x" << rdi << " r10: 0x" << r10[rax] << std::endl;
            if (r10[rax] != rdi) {
                //bad character here
                continue;
            } else {
                temp_vec.push_back(static_cast<char>(c));
//                break;
            }
        }
        if(!temp_vec.empty()){
            results.push_back(std::move(temp_vec));
        }

        r8++;

    } while (r8 != 0x22);

    if(results.size() == 0x22){
//        std::copy(results.begin(), results.end(), std::ostream_iterator<char>(std::cout));
//        std::cout << std::endl;

        //just for speedup bruting, we know that it ends with _Beurre
        results.resize(results.size()-std::string("_Beurre").size());
        print_possible_solutions(results);
    }

    return 0;
}

void run_program() {
    fill_array();

    inject_values();
    *CathedralNotreDamedeRouen = 0x7a9d0000;

    //here only brute RouenCathedral
    func1(); //CathedralNotreDamedeRouen, RouenCathedral

    inject_values(); //brute all
    MaisonPinel();
}

int main() {
    TarteAuPomme = new uint64;
    JoanOfArc = new uint64;
    HotelDeBourgtheroulde = new uint64;
    CathedralNotreDamedeRouen = new uint64;
    RouenCathedral = new uint64;
    RouenCathedral2 = new uint64;

    values_to_change = {
            TarteAuPomme,
            JoanOfArc,
            HotelDeBourgtheroulde,
            CathedralNotreDamedeRouen,
            RouenCathedral,
            RouenCathedral2
    };

    possibilities = {
            std::array<uint, 2>{0xe7, 0x82},
            std::array<uint, 2>{0xb1, 0xa2},
            std::array<uint, 2>{0xc4, 0xb9},
            std::array<uint, 2>{0xc4, 0x21},
            std::array<uint, 2>{0x2e3f, 0xb1c7},
            std::array<uint, 2>{0x1234, 0xabcd}
    };

    for (uint i = 0; i < (1 << VALUES_NUM); i++) {
        std::cout << std::bitset<VALUES_NUM>(i).to_string() << std::endl;
        current_options = i;

        run_program();

        delete[] Beurre;
//        break;
    }
}

void inject_values() {
    static bool was_printed;

    uint mask = 1 << (VALUES_NUM - 1);
    uint idx = VALUES_NUM - 1;
    if (!was_printed){
        std::cout << "Injecting: " << std::hex;
    }
    uint opt = current_options;
    while (mask > 0) {
        uint v = opt & mask;
        v >>= idx;

        *values_to_change[idx] = possibilities[idx][v];
        if (!was_printed){
            std::cout << "0x" << possibilities[idx][v] << " ";
        }

        idx--;
        mask >>= 1;
    }
    if (!was_printed){
        std::cout << std::dec << std::endl;
    }
    was_printed = !was_printed;
}
